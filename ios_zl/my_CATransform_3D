//CATransform 3D 特效详解
对于ios来说，坐标系的（0，0）点在左上角，就是越往下，Y值越大。越往右，X值越大。
一个图层的frame，它是position，bounds，anchorPoint和transform属性的一部分。
设置一个新的frame将会相应的改变图层的position和bounds，但是frame本身并没有保存。
position：是一个CGPoint值，它指定图层相当于它父图层的位置，该值基于父图层的坐标系。
bounds：是一个CGRect值，指定图层的大小（bounds.size）和图层的原点（bounds.origin），这个坐标系>是基于自身的。如果改变bounds的origin，那么在该图层的子图层，坐标会跟着改变。也就是说，改变自身>的坐标系，本身在父图层的位置不变，但它上的子图层位置变化。
anchorPoint：是一个CGPoint值，它是指定了一个基于bounds的符合坐标系的位置。锚点（anchor point）>制定了bounds相对于position的值，同时也作为一个变化时候的中心点。锚点使用空间坐标系取值范围是0-1之间的数。默认是0.5，也就是秃瓢的中心点，如果是（0，0）那么，图层向左上方移动。如果是（1，1）就向右下方移动。
---
CATransform3D 的数据结构定义了一个同质的三维变换（4x4 CGFloat值的矩阵），用于图层的旋转，缩放，偏移，歪斜和应用的透视。
---
CATransform3DIdentity 是单位矩阵，该矩阵没有缩放，旋转，歪斜，透视。该矩阵应用到图层上，就是设置默认值。
---
transform ： 是结合 anchorPoint（锚点）的位置来对图层和图层上的子图层进行变化。
sublayerTransform：是结合anchorPoint（锚点）的位置来对图层的子图层进行变化，不包括本身。
---
struct CATransform3D
{
CGFloat     m11（x缩放）,    m12（y切变）,      m13（旋转）,     m14（）;

CGFloat     m21（x切变）,    m22（y缩放）,      m23（）,         m24（）;

CGFloat     m31（旋转）,      m32（ ）,         m33（）,         m34（透视效果，要操作的这个对象要有旋转的角度，否则没有效果。正直/负值都有意义）;

CGFloat     m41（x平移）,     m42（y平移）,     m43（z平移）,    m44（）;
};
---
CATransform3D CATransform3DMakeTranslation (CGFloat tx, CGFloat ty, CGFloat tz)     的参数意思就是     tx:：x平移。  ty：y平移。  tz：z平移
tx：X轴偏移位置，往下为正数。
ty：Y轴偏移位置，往右为正数。
tz：Z轴偏移位置，往外为正数。
对于tz来说，值越大，那么图层就越往外（接近屏幕），值越小，图层越往里（屏幕里）。
---
CATransform3D CATransform3DTranslate (CATransform3D t, CGFloat tx, CGFloat ty, CGFloat tz);
t：就是上一个函数。其他的都一样。
就可以理解为：函数的叠加，效果的叠加。
---
CATransform3D CATransform3DMakeScale (CGFloat sx, CGFloat sy, CGFloat sz);
sx：X轴缩放，代表一个缩放比例，一般都是 0 --- 1 之间的数字。
sy：Y轴缩放。
sz：整体比例变换时，也就是m11（sx）== m22（sy）时，若m33（sz）>1，图形整体缩小，若0<1，图形整体放大，若m33（sz）<0，发生关于原点的对称等比变换。
---
ATransform3D CATransform3DScale (CATransform3D t, CGFloat sx, CGFloat sy, CGFloat sz)
t：就是上一个函数。其他的都一样。
就可以理解为：函数的叠加，效果的叠加。
---
CATransform3D CATransform3DMakeRotation (CGFloat angle, CGFloat x, CGFloat y, CGFloat z);
旋转效果。
angle：旋转的弧度，所以要把角度转换成弧度：角度 * M_PI / 180。
x：向X轴方向旋转。值范围-1 --- 1之间
y：向Y轴方向旋转。值范围-1 --- 1之间
z：向Z轴方向旋转。值范围-1 --- 1之间
---
 CATransform3D CATransform3DRotate (CATransform3D t, CGFloat angle, CGFloat x, CGFloat y, CGFloat z);
t：就是上一个函数。其他的都一样。
就可以理解为：函数的叠加，效果的叠加。
---
CATransform3D CATransform3DInvert (CATransform3D t);
翻转效果。
---
CGAffineTransform CATransform3DGetAffineTransform (CATransform3D t);
bool CATransform3DIsAffine (CATransform3D t);
仿射效果。
就是把一个 CATransform3D 对象转换成一个 CGAffineTransform 对象。
也就是把 CATransform3D 矩阵 转换成 CGAffineTransform 矩阵
变换函数同时提供了可以比较一个变换矩阵是否是单位矩阵,或者两个矩阵是否相等。
bool CATransform3DIsIdentity (CATransform3D t);
bool CATransform3DEqualToTransform (CATransform3D a, CATransform3D b);
也可以通过修改数据结构和键值来设置变换效果。
---





//iOS 3D UI -- CALayer的transform扩展
View负责界面的交互和显示，其中显示部分由CALayer来完成。每个UIView包含一个CALayer实例。可以这么>认为，UIView本身是不可见的，我们能看到的都是CALayer，UIView只是负责对CALayer进行管理。
    UIView的显示设置都是对CALayer属性的封装，但是这层封装掩盖了CALayer提供的3D显示功能。所以我>们想让UIView显示3D的效果的话，需要直接操作CALayer。
    要操作CALayer对象，首先要在工程中包含QuartzCore.framework，在文件中import <QuartzCore/QuartzCore.h>头文件。QuartzCore.framework中包含了CALayer以及CALayer一些官方子类的定义。
    通过设置CALayer的transform属性，可以使CALayer产生3D空间内的平移、缩放、旋转等变化。 

正交投影 
image.layer.transform = CATransform3DMakeRotation(M_PI/6, 0, 0, 1); 绕Z轴旋转30度后的效果

image.layer.transform = CATransform3DMakeRotation(M_PI/6, 0, 1, 0); 绕Y轴旋转30度后的效果

image.layer.transform = CATransform3DMakeRotation(M_PI/6, 1, 0, 0); 绕X轴旋转30度后的效果

//透视投影
可以通过矩阵连乘自己构造透视投影矩阵。构造透视投影矩阵的代码如下：
//center指的是相机 的位置，相机的位置是相对于要进行变换的CALayer的来说的，原点是CALayer的anchorPoint在整个CALayer的位置，例如CALayer的大小是(100, 200), anchorPoint值为(0.5, 0.5)，此时anchorPoint在整个CALayer中的位置就是(50, 100)，正中心的位置。传入透视变换的相机位置为(0, 0)，那么相机>所在的位置相对于CALayer就是(50, 100)。如果希望相机在左上角，则需要传入(-50, -100)。
disZ表示的是相机离z=0平面（也可以理解为屏幕）的距离。
CATransform3D CATransform3DMakePerspective(CGPoint center, float disZ)
{
    CATransform3D transToCenter = CATransform3DMakeTranslation(-center.x, -center.y, 0);
    CATransform3D transBack = CATransform3DMakeTranslation(center.x, center.y, 0);
    CATransform3D scale = CATransform3DIdentity;
    scale.m34 = -1.0f/disZ;
    return CATransform3DConcat(CATransform3DConcat(transToCenter, scale), transBack);
}

CATransform3D CATransform3DPerspect(CATransform3D t, CGPoint center, float disZ)
{
    return CATransform3DConcat(t, CATransform3DMakePerspective(center, disZ));
}

CATransform3D rotate = CATransform3DMakeRotation(M_PI/6, 1, 0, 0);
image.layer.transform = CATransform3DPerspect(rotate, CGPointMake(0, 0), 200);


